	add    al,bl
(parallel [(set (reg:QI ax) (plus:QI (reg:QI ax) (reg:QI bx)))])
	add    r12b,r15b
(parallel [(set (reg:QI r12) (plus:QI (reg:QI r12) (reg:QI r15)))])
	add    cl, dh
(parallel [(set (reg:QI cx) (plus:QI (reg:QI cx) (subreg:QI (zero_extract:SI (reg:SI dx) (const_int 8) (const_int 8)) 0)))])
	add    bl, ch
(parallel [(set (reg:QI bx) (plus:QI (reg:QI bx) (subreg:QI (zero_extract:SI (reg:SI cx) (const_int 8) (const_int 8)) 0)))])
	add    ah, cl
(parallel [(set (zero_extract:SI (reg:SI ax) (const_int 8) (const_int 8)) (plus:QI (subreg:QI (zero_extract:SI (reg:SI ax) (const_int 8) (const_int 8)) 0) (reg:QI cx)))])
	add    bh, dl
(parallel [(set (zero_extract:SI (reg:SI bx) (const_int 8) (const_int 8)) (plus:QI (subreg:QI (zero_extract:SI (reg:SI bx) (const_int 8) (const_int 8)) 0) (reg:QI dx)))])
	add    dh, ah
(parallel [(set (zero_extract:SI (reg:SI dx) (const_int 8) (const_int 8)) (plus:QI (subreg:QI (zero_extract:SI (reg:SI dx) (const_int 8) (const_int 8)) 0) (subreg:QI (zero_extract:SI (reg:SI ax) (const_int 8) (const_int 8)) 0)))])
	add    ch, bh
(parallel [(set (zero_extract:SI (reg:SI cx) (const_int 8) (const_int 8)) (plus:QI (subreg:QI (zero_extract:SI (reg:SI cx) (const_int 8) (const_int 8)) 0) (subreg:QI (zero_extract:SI (reg:SI bx) (const_int 8) (const_int 8)) 0)))])
	add    BYTE PTR [rax], bh
(parallel [(set (mem:QI (reg:DI ax)) (plus:QI (mem:QI (reg:DI ax)) (subreg:QI (zero_extract:SI (reg:SI bx) (const_int 8) (const_int 8)) 0)))])
	add    BYTE PTR [rcx], dh
(parallel [(set (mem:QI (reg:DI cx)) (plus:QI (mem:QI (reg:DI cx)) (subreg:QI (zero_extract:SI (reg:SI dx) (const_int 8) (const_int 8)) 0)))])
	add    ch, BYTE PTR [rcx]
(parallel [(set (plus:QI (mem:QI (reg:DI cx)) (subreg:QI (zero_extract:SI (reg:SI cx) (const_int 8) (const_int 8)) 0)) (mem:QI (reg:DI cx)))])
	add    dh, BYTE PTR [rdx]
(parallel [(set (plus:QI (mem:QI (reg:DI dx)) (subreg:QI (zero_extract:SI (reg:SI dx) (const_int 8) (const_int 8)) 0)) (mem:QI (reg:DI dx)))])
	add    BYTE PTR [rbx+0xd9d], ah
(parallel [(set (mem:QI (plus:DI (reg:DI bx) (const_int 3485))) (plus:QI (mem:QI (plus:DI (reg:DI bx) (const_int 3485))) (subreg:QI (zero_extract:SI (reg:SI ax) (const_int 8) (const_int 8)) 0)))])
	add    BYTE PTR [rdx+0x1234], ch
(parallel [(set (mem:QI (plus:DI (reg:DI dx) (const_int 4660))) (plus:QI (mem:QI (plus:DI (reg:DI dx) (const_int 4660))) (subreg:QI (zero_extract:SI (reg:SI cx) (const_int 8) (const_int 8)) 0)))])
	add    eax,DWORD PTR [ecx+edx*4-0xc]
(parallel [(set (reg:SI ax) (plus:SI (reg:SI ax) (mem:SI (plus:SI (plus:SI (reg:SI cx) (mult:SI (reg:SI dx) (const_int 4))) (const_int -12)))))])
	add    ebx,DWORD PTR [esi+edi*4-0xf]
(parallel [(set (reg:SI bx) (plus:SI (reg:SI bx) (mem:SI (plus:SI (plus:SI (reg:SI si) (mult:SI (reg:SI di) (const_int 4))) (const_int -15)))))])
	add    rax,QWORD PTR fs:0x28
(parallel [(set (reg:DI ax) (plus:DI (reg:DI ax) (mem:FSDI (const_int 40))))])
	add    rdi,QWORD PTR fs:0x43
(parallel [(set (reg:DI di) (plus:DI (reg:DI di) (mem:FSDI (const_int 67))))])
	add    QWORD PTR fs:0x43, rbx
(parallel [(set (mem:FSDI (const_int 67)) (plus:DI (mem:FSDI (const_int 67)) (reg:DI bx)))])
	add    QWORD PTR fs:0x85, rcx
(parallel [(set (mem:FSDI (const_int 133)) (plus:DI (mem:FSDI (const_int 133)) (reg:DI cx)))])
	add    eax,DWORD PTR ds:0x3
(parallel [(set (reg:SI ax) (plus:SI (reg:SI ax) (mem:SI (const_int 3))))])
	add    ebx,DWORD PTR ds:0x4
(parallel [(set (reg:SI bx) (plus:SI (reg:SI bx) (mem:SI (const_int 4))))])
	hlt
(halt)
	syscall
(syscall)
	nop
(nop)
	endbr64
(nop)
	nop    DWORD PTR [rax]
(nop)
	nop    DWORD PTR [rax+rax]
(nop)
	nop    WORD PTR [rax+rax]
(nop)
	nop    WORD PTR cs:[rax+rax]
(nop)
	xchg   ax,ax
(nop)
	xchg   eax,eax
(nop)
	xchg   rax,rax
(nop)
	xchg   ax,r11w
(parallel [(set (reg:HI r11) (reg:HI ax)) (set (reg:HI ax) (reg:HI r11)) (clobber (reg:CC flags))])   
	xchg   bx,r12w
(parallel [(set (reg:HI r12) (reg:HI bx)) (set (reg:HI bx) (reg:HI r12)) (clobber (reg:CC flags))])   
	xchg   r8d,r9d
(parallel [(set (reg:SI r9) (reg:SI r8)) (set (reg:SI r8) (reg:SI r9)) (clobber (reg:CC flags))])
	xchg   r11d,r12d
(parallel [(set (reg:SI r12) (reg:SI r11)) (set (reg:SI r11) (reg:SI r12)) (clobber (reg:CC flags))])
	xchg   rax,rbx
(parallel [(set (reg:DI bx) (reg:DI ax)) (set (reg:DI ax) (reg:DI bx)) (clobber (reg:CC flags))])
	xchg   rcx,rdx
(parallel [(set (reg:DI dx) (reg:DI cx)) (set (reg:DI cx) (reg:DI dx)) (clobber (reg:CC flags))])
	xchg   BYTE PTR [rax+0xd9d], bl
(parallel [(set (mem:QI (plus (reg:DI ax) (const_int 3485))) (reg:QI bx)) (set (reg:QI bx) (mem:QI (plus (reg:DI ax) (const_int 3485)))) (clobber (reg:CC flags))])
	xchg   BYTE PTR [rcx+0x1234], dl
(parallel [(set (mem:QI (plus (reg:DI cx) (const_int 4660))) (reg:QI dx)) (set (reg:QI dx) (mem:QI (plus (reg:DI cx) (const_int 4660)))) (clobber (reg:CC flags))])
	add    eax,DWORD PTR [rbx*4+0x3]
(set (reg:SI ax) (plus:SI (reg:SI ax) (mem:SI (plus:DI (mult:DI (reg:DI bx) (const_int 4)) (const_int 3)))))
	add    ebx,DWORD PTR [rcx*4+0x7]
(set (reg:SI bx) (plus:SI (reg:SI bx) (mem:SI (plus:DI (mult:DI (reg:DI cx) (const_int 4)) (const_int 7)))))
	add    rax,QWORD PTR [rbx*8+0x3]
(set (reg:DI ax) (plus:DI (reg:DI ax) (mem:DI (plus:DI (mult:DI (reg:DI bx) (const_int 8)) (const_int 3)))))
	add    rbx,QWORD PTR [rcx*8+0x7]
(set (reg:DI bx) (plus:DI (reg:DI bx) (mem:DI (plus:DI (mult:DI (reg:DI cx) (const_int 8)) (const_int 7)))))
	and    eax,eax
(set (reg:CCZ flags) (compare:CCZ (reg:SI ax) (const_int 0)))
	and    ebx,ebx
(set (reg:CCZ flags) (compare:CCZ (reg:SI bx) (const_int 0)))
	and    eax,DWORD PTR ds:0x3
(parallel [(set (reg:SI ax) (and:SI (reg:SI ax) (mem:SI (const_int 3)))) (clobber (reg:CC flags))])
	and    ebx,DWORD PTR ds:0x4
(parallel [(set (reg:SI bx) (and:SI (reg:SI bx) (mem:SI (const_int 4)))) (clobber (reg:CC flags))])
	and    al,bh
(parallel [(set (reg:CCZ flags) (compare:CCZ (and:QI (reg:QI ax) (subreg:QI (zero_extract:SI (reg:SI bx) (const_int 8) (const_int 8)) 0)) (const_int 0))) (set (reg:QI ax) (and:QI (reg:QI ax) (subreg:QI (zero_extract:SI (reg:SI bx) (const_int 8) (const_int 8)) 0)))])
	and    cl,dh
(parallel [(set (reg:CCZ flags) (compare:CCZ (and:QI (reg:QI cx) (subreg:QI (zero_extract:SI (reg:SI dx) (const_int 8) (const_int 8)) 0)) (const_int 0))) (set (reg:QI cx) (and:QI (reg:QI cx) (subreg:QI (zero_extract:SI (reg:SI dx) (const_int 8) (const_int 8)) 0)))])
	sub    eax,DWORD PTR ds:0x3
(parallel [(set (reg:SI ax) (plus:SI (reg:SI ax) (const_int 3))) (clobber (reg:CC flags))])
	sub    ebx,DWORD PTR ds:0x4
(parallel [(set (reg:SI bx) (plus:SI (reg:SI bx) (const_int 4))) (clobber (reg:CC flags))])
	sub    eax,DWORD PTR [rbx*4+0x3]
(set (reg:SI ax) (minus:SI (reg:SI ax) (mem:SI (plus:DI (mult:DI (reg:DI bx) (const_int 4)) (const_int 3)))))
	sub    ebx,DWORD PTR [rcx*4+0x7]
(set (reg:SI bx) (minus:SI (reg:SI bx) (mem:SI (plus:DI (mult:DI (reg:DI cx) (const_int 4)) (const_int 7)))))
	sub    rax,QWORD PTR [rbx*8+0x3]
(set (reg:DI ax) (minus:DI (reg:DI ax) (mem:DI (plus:DI (mult:DI (reg:DI bx) (const_int 8)) (const_int 3)))))
	sub    rbx,QWORD PTR [rcx*8+0x7]
(set (reg:DI bx) (minus:DI (reg:DI bx) (mem:DI (plus:DI (mult:DI (reg:DI cx) (const_int 8)) (const_int 7)))))
	shl    al,0x3
(parallel [(set (reg:CCZ flags) (compare:CCZ (ashift:QI (reg:QI ax) (const_int 3)) (const_int 0))) (set (reg:QI ax) (ashift:QI (reg:QI ax) (const_int 3)))])
	shl    bl,0x4
(parallel [(set (reg:CCZ flags) (compare:CCZ (ashift:QI (reg:QI bx) (const_int 4)) (const_int 0))) (set (reg:QI bx) (ashift:QI (reg:QI bx) (const_int 4)))])
	shl    ah,0x4
(parallel [(set (zero_extract:SI (reg:SI ax) (const_int 8) (const_int 8)) (ashift:HI (subreg:QI (zero_extract:SI (reg:SI ax) (const_int 8) (const_int 8)) 0) (const_int 4))) (clobber (reg:CC flags))])
	shl    dh,0x5
(parallel [(set (zero_extract:SI (reg:SI dx) (const_int 8) (const_int 8)) (ashift:HI (subreg:QI (zero_extract:SI (reg:SI dx) (const_int 8) (const_int 8)) 0) (const_int 5))) (clobber (reg:CC flags))])
	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi] 
(set (reg:CC flags) (compare:CC (mem:QI (reg:DI si)) (mem:QI (reg:DI di))))
	cmp    BYTE PTR [rax+rax*4+0x3],cl
(set (reg:CCZ flags) (compare:CCZ (mem:QI (plus:DI (plus:DI (reg:DI ax) (mult:DI (reg:DI ax) (const_int 4))) (const_int 3))) (reg:QI cx)))
	cmp    BYTE PTR [rbx+rbx*4+0xa],dl
(set (reg:CCZ flags) (compare:CCZ (mem:QI (plus:DI (plus:DI (reg:DI bx) (mult:DI (reg:DI bx) (const_int 4))) (const_int 10))) (reg:QI dx)))
	cmp    eax,DWORD PTR ds:0x3
(set (reg:CCGC flags) (compare:CCGC (reg:SI ax) (mem:SI (const_int 3))))
	cmp    ebx,DWORD PTR ds:0x4
(set (reg:CCGC flags) (compare:CCGC (reg:SI bx) (mem:SI (const_int 4))))
	mov    eax,eax
(set (reg:DI ax) (zero_extend:DI (reg:SI ax)))
	mov    ebx,ebx
(set (reg:DI bx) (zero_extend:DI (reg:SI bx)))
	mov    r14,QWORD PTR fs:0x28
(set (reg:DI r14) (mem:FSDI (const_int 40)))
	mov    r15,QWORD PTR fs:0x30
(set (reg:DI r15) (mem:FSDI (const_int 42)))
	mov    rax,QWORD PTR [rbx*8+0x3]
(set (reg:DI ax) (mem:DI (plus:DI (mult:DI (reg:DI bx) (const_int 8)) (const_int 3))))
	mov    rcx,QWORD PTR [rdx*8+0x4]
(set (reg:DI cx) (mem:DI (plus:DI (mult:DI (reg:DI dx) (const_int 8)) (const_int 4))))
	mov    rsi,QWORD PTR [rsi*8+0xd9d]
(set (reg:DI si) (mem:DI (plus:DI (mult:DI (reg:DI si) (const_int 8)) (const_int 3485))))
	mov    rdi,QWORD PTR [rdi*8+0x1234]
(set (reg:DI di) (mem:DI (plus:DI (mult:DI (reg:DI di) (const_int 8)) (const_int 4660))))
	mov    ebx,DWORD PTR [rax*4+0x3]
(set (reg:SI bx) (mem:SI (plus:DI (mult:DI (reg:DI ax) (const_int 4)) (const_int 3))))
	mov    edx,DWORD PTR [rcx*4+0x4]
(set (reg:SI dx) (mem:SI (plus:DI (mult:DI (reg:DI cx) (const_int 4)) (const_int 4))))
	mov    r12d,DWORD PTR [r12*4+0xd9d]
(set (reg:SI r12) (mem:SI (plus:DI (mult:DI (reg:DI r12) (const_int 4)) (const_int 3485))))
	mov    r15d,DWORD PTR [r15*4+0x1234]
(set (reg:SI r15) (mem:SI (plus:DI (mult:DI (reg:DI r15) (const_int 4)) (const_int 4660))))
	movsxd rax,DWORD PTR ds:0x3
(set (reg:DI ax) (sign_extend:DI (mem:SI (const_int 3))))
	movsxd rbx,DWORD PTR ds:0x4
(set (reg:DI bx) (sign_extend:DI (mem:SI (const_int 4))))
	movsxd rax,DWORD PTR [rbx*8+0x3]
(set (reg:DI ax) (sign_extend:DI (mem:SI (plus:DI (mult:DI (reg:DI bx) (const_int 8)) (const_int 3)))))
	movsxd rcx,DWORD PTR [rdx*8+0x4]
(set (reg:DI cx) (sign_extend:DI (mem:SI (plus:DI (mult:DI (reg:DI dx) (const_int 8)) (const_int 4)))))
	movsxd rsi,DWORD PTR [rdi*4+0x5]
(set (reg:DI si) (sign_extend:DI (mem:SI (plus:DI (mult:DI (reg:DI di) (const_int 4)) (const_int 5)))))
	movsxd rbx,DWORD PTR [rcx*4+0x6]
(set (reg:DI bx) (sign_extend:DI (mem:SI (plus:DI (mult:DI (reg:DI cx) (const_int 4)) (const_int 6)))))
	movsxd r12d,DWORD PTR [r15*8+0x7]
(set (reg:SI r12) (sign_extend:SI (mem:SI (plus:DI (mult:DI (reg:DI r15) (const_int 8)) (const_int 7)))))
	movsxd r13d,DWORD PTR [r14*8+0x8]
(set (reg:SI r13) (sign_extend:SI (mem:SI (plus:DI (mult:DI (reg:DI r14) (const_int 8)) (const_int 8)))))
	movsxd r8d,DWORD PTR [r9*4+0xd9d]
(set (reg:SI r8) (sign_extend:SI (mem:SI (plus:DI (mult:DI (reg:DI r9) (const_int 4)) (const_int 3485)))))
	movsxd r10d,DWORD PTR [r11*4+0x1234]
(set (reg:SI r10) (sign_extend:SI (mem:SI (plus:DI (mult:DI (reg:DI r11) (const_int 4)) (const_int 4660)))))
	movsxd ax,WORD PTR [rbx*8+0x3]
(set (reg:HI ax) (sign_extend:HI (mem:HI (plus:DI (mult:DI (reg:DI bx) (const_int 8)) (const_int 3)))))
	movsxd cx,WORD PTR [rdx*8+0x4]
(set (reg:HI cx) (sign_extend:HI (mem:HI (plus:DI (mult:DI (reg:DI dx) (const_int 8)) (const_int 4)))))
	movsxd si,WORD PTR [rdi*4+0x5]
(set (reg:HI si) (sign_extend:HI (mem:HI (plus:DI (mult:DI (reg:DI di) (const_int 4)) (const_int 5)))))
	movsxd bx,WORD PTR [rcx*4+0x6]
(set (reg:HI bx) (sign_extend:HI (mem:HI (plus:DI (mult:DI (reg:DI cx) (const_int 4)) (const_int 6)))))
	movsx  rax,BYTE PTR ds:0x3
(set (reg:DI ax) (sign_extend:DI (mem:QI (const_int 3))))
	movsx  rbx,BYTE PTR ds:0x4
(set (reg:DI bx) (sign_extend:DI (mem:QI (const_int 4))))
	movsx  rbx,BYTE PTR [rax*8+0x3]
(set (reg:DI bx) (sign_extend:DI (mem:QI (plus:DI (mult:DI (reg:DI ax) (const_int 8)) (const_int 3)))))
	movsx  rdx,BYTE PTR [rcx*8+0x4]
(set (reg:DI dx) (sign_extend:DI (mem:QI (plus:DI (mult:DI (reg:DI cx) (const_int 8)) (const_int 4)))))
	movsx  rdi,BYTE PTR [rsi*4+0x5]
(set (reg:DI di) (sign_extend:DI (mem:QI (plus:DI (mult:DI (reg:DI si) (const_int 4)) (const_int 5)))))
	movsx  rcx,BYTE PTR [rbx*4+0x6]
(set (reg:DI cx) (sign_extend:DI (mem:QI (plus:DI (mult:DI (reg:DI bx) (const_int 4)) (const_int 6)))))
	movsx  ecx,BYTE PTR ds:0x5
(set (reg:SI cx) (sign_extend:SI (mem:QI (const_int 5))))
	movsx  edx,BYTE PTR ds:0x6
(set (reg:SI dx) (sign_extend:SI (mem:QI (const_int 6))))
	movsx  eax,BYTE PTR [rbx*8+0x3]
(set (reg:SI ax) (sign_extend:SI (mem:QI (plus:DI (mult:DI (reg:DI bx) (const_int 8)) (const_int 3)))))
	movsx  ecx,BYTE PTR [rdx*8+0x4]
(set (reg:SI cx) (sign_extend:SI (mem:QI (plus:DI (mult:DI (reg:DI dx) (const_int 8)) (const_int 4)))))
	movsx  esi,BYTE PTR [rdi*4+0x5]
(set (reg:SI si) (sign_extend:SI (mem:QI (plus:DI (mult:DI (reg:DI di) (const_int 4)) (const_int 5)))))
	movsx  ebx,BYTE PTR [rcx*4+0x6]
(set (reg:SI bx) (sign_extend:SI (mem:QI (plus:DI (mult:DI (reg:DI cx) (const_int 4)) (const_int 6)))))
	movsx  si,BYTE PTR ds:0x2
(set (reg:HI si) (sign_extend:HI (mem:QI (const_int 2))))
	movsx  di,BYTE PTR ds:0x3
(set (reg:HI di) (sign_extend:HI (mem:QI (const_int 3))))
	movsx  r12w,BYTE PTR [r15*8+0x7]
(set (reg:HI r12) (sign_extend:HI (mem:QI (plus:DI (mult:DI (reg:DI r15) (const_int 8)) (const_int 7)))))
	movsx  r13w,BYTE PTR [r14*8+0x8]
(set (reg:HI r13) (sign_extend:HI (mem:QI (plus:DI (mult:DI (reg:DI r14) (const_int 8)) (const_int 8)))))
	movsx  r8w,BYTE PTR [r9*4+0xd9d]
(set (reg:HI r8) (sign_extend:HI (mem:QI (plus:DI (mult:DI (reg:DI r9) (const_int 4)) (const_int 3485)))))
	movsx  r10w,BYTE PTR [r11*4+0x1234]
(set (reg:HI r10) (sign_extend:HI (mem:QI (plus:DI (mult:DI (reg:DI r11) (const_int 4)) (const_int 4660)))))
	movsx  rax,WORD PTR [rbx*8+0x3]
(set (reg:DI ax) (sign_extend:DI (mem:HI (plus:DI (mult:DI (reg:DI bx) (const_int 8)) (const_int 3)))))
	movsx  rcx,WORD PTR [rdx*8+0x4]
(set (reg:DI cx) (sign_extend:DI (mem:HI (plus:DI (mult:DI (reg:DI dx) (const_int 8)) (const_int 4)))))
	movsx  rsi,WORD PTR [rdi*4+0x5]
(set (reg:DI si) (sign_extend:DI (mem:HI (plus:DI (mult:DI (reg:DI di) (const_int 4)) (const_int 5)))))
	movsx  rbx,WORD PTR [rcx*4+0x6]
(set (reg:DI bx) (sign_extend:DI (mem:HI (plus:DI (mult:DI (reg:DI cx) (const_int 4)) (const_int 6)))))
	movsx  r12d,WORD PTR [r15*8+0x7]
(set (reg:SI r12) (sign_extend:SI (mem:HI (plus:DI (mult:DI (reg:DI r15) (const_int 8)) (const_int 7)))))
	movsx  r13d,WORD PTR [r14*8+0x8]
(set (reg:SI r13) (sign_extend:SI (mem:HI (plus:DI (mult:DI (reg:DI r14) (const_int 8)) (const_int 8)))))
	movsx  r8d,WORD PTR [r9*4+0xd9d]
(set (reg:SI r8) (sign_extend:SI (mem:HI (plus:DI (mult:DI (reg:DI r9) (const_int 4)) (const_int 3485)))))
	movsx  r10d,WORD PTR [r11*4+0x1234]
(set (reg:SI r10) (sign_extend:SI (mem:HI (plus:DI (mult:DI (reg:DI r11) (const_int 4)) (const_int 4660)))))
	movzx  rcx,BYTE PTR ds:0x2
(set (reg:DI cx) (zero_extend:DI (mem:QI (const_int 2))))
	movzx  rdx,BYTE PTR ds:0x3
(set (reg:DI dx) (zero_extend:DI (mem:QI (const_int 3))))
	movzx  eax,BYTE PTR ds:0x2
(set (reg:SI ax) (zero_extend:SI (mem:QI (const_int 2))))
	movzx  ebx,BYTE PTR ds:0x3
(set (reg:SI bx) (zero_extend:SI (mem:QI (const_int 3))))
	movzx  si,BYTE PTR ds:0x2
(set (reg:HI si) (zero_extend:HI (mem:QI (const_int 2))))
	movzx  di,BYTE PTR ds:0x3
(set (reg:HI di) (zero_extend:HI (mem:QI (const_int 3))))
	movzx  esi,WORD PTR ds:0x2
(set (reg:SI si) (zero_extend:SI (mem:HI (const_int 2))))
	movzx  edi,WORD PTR ds:0x3
(set (reg:SI di) (zero_extend:SI (mem:HI (const_int 3))))
	movzx  rax,WORD PTR ds:0x2
(set (reg:DI ax) (zero_extend:DI (mem:HI (const_int 2))))
	movzx  rbx,WORD PTR ds:0x3
(set (reg:DI bx) (zero_extend:DI (mem:HI (const_int 3))))
	movzx  rbx,BYTE PTR [rax*8+0x3]
(set (reg:DI bx) (zero_extend:DI (mem:QI (plus:DI (mult:DI (reg:DI ax) (const_int 8)) (const_int 3)))))
	movzx  rdx,BYTE PTR [rcx*8+0x4]
(set (reg:DI dx) (zero_extend:DI (mem:QI (plus:DI (mult:DI (reg:DI cx) (const_int 8)) (const_int 4)))))
	movzx  rdi,BYTE PTR [rsi*4+0x5]
(set (reg:DI di) (zero_extend:DI (mem:QI (plus:DI (mult:DI (reg:DI si) (const_int 4)) (const_int 5)))))
	movzx  rcx,BYTE PTR [rbx*4+0x6]
(set (reg:DI cx) (zero_extend:DI (mem:QI (plus:DI (mult:DI (reg:DI bx) (const_int 4)) (const_int 6)))))
	movzx  eax,BYTE PTR [rbx*8+0x3]
(set (reg:SI ax) (zero_extend:SI (mem:QI (plus:DI (mult:DI (reg:DI bx) (const_int 8)) (const_int 3)))))
	movzx  ecx,BYTE PTR [rdx*8+0x4]
(set (reg:SI cx) (zero_extend:SI (mem:QI (plus:DI (mult:DI (reg:DI dx) (const_int 8)) (const_int 4)))))
	movzx  esi,BYTE PTR [rdi*4+0x5]
(set (reg:SI si) (zero_extend:SI (mem:QI (plus:DI (mult:DI (reg:DI di) (const_int 4)) (const_int 5)))))
	movzx  ebx,BYTE PTR [rcx*4+0x6]
(set (reg:SI bx) (zero_extend:SI (mem:QI (plus:DI (mult:DI (reg:DI cx) (const_int 4)) (const_int 6)))))
	movzx  r12w,BYTE PTR [r15*8+0x7]
(set (reg:HI r12) (zero_extend:HI (mem:QI (plus:DI (mult:DI (reg:DI r15) (const_int 8)) (const_int 7)))))
	movzx  r13w,BYTE PTR [r14*8+0x8]
(set (reg:HI r13) (zero_extend:HI (mem:QI (plus:DI (mult:DI (reg:DI r14) (const_int 8)) (const_int 8)))))
	movzx  r8w,BYTE PTR [r9*4+0xd9d]
(set (reg:HI r8) (zero_extend:HI (mem:QI (plus:DI (mult:DI (reg:DI r9) (const_int 4)) (const_int 3485)))))
	movzx  r10w,BYTE PTR [r11*4+0x1234]
(set (reg:HI r10) (zero_extend:HI (mem:QI (plus:DI (mult:DI (reg:DI r11) (const_int 4)) (const_int 4660)))))
	movzx  rax,WORD PTR [rbx*8+0x3]
(set (reg:DI ax) (zero_extend:DI (mem:HI (plus:DI (mult:DI (reg:DI bx) (const_int 8)) (const_int 3)))))
	movzx  rcx,WORD PTR [rdx*8+0x4]
(set (reg:DI cx) (zero_extend:DI (mem:HI (plus:DI (mult:DI (reg:DI dx) (const_int 8)) (const_int 4)))))
	movzx  rsi,WORD PTR [rdi*4+0x5]
(set (reg:DI si) (zero_extend:DI (mem:HI (plus:DI (mult:DI (reg:DI di) (const_int 4)) (const_int 5)))))
	movzx  rbx,WORD PTR [rcx*4+0x6]
(set (reg:DI bx) (zero_extend:DI (mem:HI (plus:DI (mult:DI (reg:DI cx) (const_int 4)) (const_int 6)))))
	movzx  r12d,WORD PTR [r15*8+0x7]
(set (reg:SI r12) (zero_extend:SI (mem:HI (plus:DI (mult:DI (reg:DI r15) (const_int 8)) (const_int 7)))))
	movzx  r13d,WORD PTR [r14*8+0x8]
(set (reg:SI r13) (zero_extend:SI (mem:HI (plus:DI (mult:DI (reg:DI r14) (const_int 8)) (const_int 8)))))
	movzx  r8d,WORD PTR [r9*4+0xd9d]
(set (reg:SI r8) (zero_extend:SI (mem:HI (plus:DI (mult:DI (reg:DI r9) (const_int 4)) (const_int 3485)))))
	movzx  r10d,WORD PTR [r11*4+0x1234]
(set (reg:SI r10) (zero_extend:SI (mem:HI (plus:DI (mult:DI (reg:DI r11) (const_int 4)) (const_int 4660)))))
	test   BYTE PTR [rax*2+0x3],0x4
(set (reg:CCZ flags) (compare:CCZ (and:QI (mem:QI (plus:DI (mult:DI (reg:DI ax) (const_int 2)) (const_int 3))) (const_int 4)) (const_int 0)))
	test   BYTE PTR [rbx*2+0xc],0xf
(set (reg:CCZ flags) (compare:CCZ (and:QI (mem:QI (plus:DI (mult:DI (reg:DI bx) (const_int 2)) (const_int 12))) (const_int 15)) (const_int 0)))
	test   BYTE PTR [rax*4+0x1],0x2
(set (reg:CCZ flags) (compare:CCZ (and:QI (mem:QI (plus:DI (mult:DI (reg:DI ax) (const_int 4)) (const_int 1))) (const_int 2)) (const_int 0)))
	test   BYTE PTR [rbx*4+0x8],0x9
(set (reg:CCZ flags) (compare:CCZ (and:QI (mem:QI (plus:DI (mult:DI (reg:DI bx) (const_int 4)) (const_int 8))) (const_int 9)) (const_int 0)))
	test   BYTE PTR [rax+0xd9d], bh
(set (reg:CCZ flags) (compare:CCZ (and:QI (mem:QI (plus:DI (reg:DI ax) (const_int 3485))) (subreg:QI (zero_extract:SI (reg:SI bx) (const_int 8) (const_int 8)) 0)) (const_int 0)))
	test   BYTE PTR [rcx+0x1234], dh
(set (reg:CCZ flags) (compare:CCZ (and:QI (mem:QI (plus:DI (reg:DI cx) (const_int 4660))) (subreg:QI (zero_extract:SI (reg:SI dx) (const_int 8) (const_int 8)) 0)) (const_int 0)))
	or     al,ch
(parallel [(set (reg:CCZ flags) (compare:CCZ (ior:QI (reg:QI ax) (subreg:QI (zero_extract:SI (reg:SI cx) (const_int 8) (const_int 8)) 0)) (const_int 0))) (set (reg:QI ax) (ior:QI (reg:QI ax) (subreg:QI (zero_extract:SI (reg:SI cx) (const_int 8) (const_int 8)) 0)))])
	or     bl,dh
(parallel [(set (reg:CCZ flags) (compare:CCZ (ior:QI (reg:QI bx) (subreg:QI (zero_extract:SI (reg:SI dx) (const_int 8) (const_int 8)) 0)) (const_int 0))) (set (reg:QI bx) (ior:QI (reg:QI bx) (subreg:QI (zero_extract:SI (reg:SI dx) (const_int 8) (const_int 8)) 0)))])
	or     BYTE PTR [rax+rbx*4+0x20], ch
(parallel [(set (mem:QI (plus:DI (plus:DI (reg:DI ax) (mult:DI (reg:DI bx) (const_int 4))) (const_int 32))) (ior:QI (mem:QI (plus:DI (plus:DI (reg:DI ax) (mult:DI (reg:DI bx) (const_int 4))) (const_int 32))) (subreg:QI (zero_extract:SI (reg:SI cx) (const_int 8) (const_int 8)) 0))) (clobber (reg:CC flags))])
	or     BYTE PTR [r8+r9*4+0x30], dh
(parallel [(set (mem:QI (plus:DI (plus:DI (reg:DI r8) (mult:DI (reg:DI r9) (const_int 4))) (const_int 48))) (ior:QI (mem:QI (plus:DI (plus:DI (reg:DI r8) (mult:DI (reg:DI r9) (const_int 4))) (const_int 48))) (subreg:QI (zero_extract:SI (reg:SI dx) (const_int 8) (const_int 8)) 0))) (clobber (reg:CC flags))])
	or     BYTE PTR [rcx+rdx*2+0xd9d], ah
(parallel [(set (mem:QI (plus:DI (plus:DI (reg:DI cx) (mult:DI (reg:DI dx) (const_int 2))) (const_int 3485))) (ior:QI (mem:QI (plus:DI (plus:DI (reg:DI cx) (mult:DI (reg:DI dx) (const_int 2))) (const_int 3485))) (subreg:QI (zero_extract:SI (reg:SI ax) (const_int 8) (const_int 8)) 0))) (clobber (reg:CC flags))])
	or     BYTE PTR [r10+r11*2+0x1234], bh
(parallel [(set (mem:QI (plus:DI (plus:DI (reg:DI r10) (mult:DI (reg:DI r11) (const_int 2))) (const_int 4660))) (ior:QI (mem:QI (plus:DI (plus:DI (reg:DI r10) (mult:DI (reg:DI r11) (const_int 2))) (const_int 4660))) (subreg:QI (zero_extract:SI (reg:SI bx) (const_int 8) (const_int 8)) 0))) (clobber (reg:CC flags))])
	ror    BYTE PTR [rax], bl
(parallel [(set (mem:QI (reg:DI ax)) (rotatert:QI (mem:QI (reg:DI ax)) (reg:QI bx))) (clobber (reg:CC flags))])
	ror    BYTE PTR [rcx], dl
(parallel [(set (mem:QI (reg:DI cx)) (rotatert:QI (mem:QI (reg:DI cx)) (reg:QI dx))) (clobber (reg:CC flags))])
	ror    BYTE PTR [r8], 0x1
(parallel [(set (mem:QI (reg:DI r8)) (rotatert:QI (mem:QI (reg:DI r8)) (const_int 1))) (clobber (reg:CC flags))])
	ror    BYTE PTR [r9], 0x3
(parallel [(set (mem:QI (reg:DI r9)) (rotatert:QI (mem:QI (reg:DI r9)) (const_int 3))) (clobber (reg:CC flags))])
	ror    BYTE PTR [rax+0xd9d], bl
(parallel [(set (mem:QI (plus:DI (reg:DI ax) (const_int 3485))) (rotatert:QI (mem:QI (plus:DI (reg:DI ax) (const_int 3485))) (reg:QI bx))) (clobber (reg:CC flags))])
	ror    BYTE PTR [rcx+0x1234], dl
(parallel [(set (mem:QI (plus:DI (reg:DI cx) (const_int 4660))) (rotatert:QI (mem:QI (plus:DI (reg:DI cx) (const_int 4660))) (reg:QI dx))) (clobber (reg:CC flags))])
	ror    BYTE PTR [r8+0xd9d], 0x1
(parallel [(set (mem:QI (plus:DI (reg:DI r8) (const_int 3485))) (rotatert:QI (mem:QI (plus:DI (reg:DI r8) (const_int 3485))) (const_int 1))) (clobber (reg:CC flags))])
	ror    BYTE PTR [r9+0x1234], 0x3
(parallel [(set (mem:QI (plus:DI (reg:DI r9) (const_int 4660))) (rotatert:QI (mem:QI (plus:DI (reg:DI r9) (const_int 4660))) (const_int 3))) (clobber (reg:CC flags))])
	loop   0x3
(set (pc) (if_then_else (ne (compare:CCZ (pre_dec:DI cx) (const_int 0)) (const_int 0)) (const_int 3) (pc)))
	loop   0x4
(set (pc) (if_then_else (ne (compare:CCZ (pre_dec:DI cx) (const_int 0)) (const_int 0)) (const_int 4) (pc)))
	loope  0x5
(set (pc) (if_then_else (eq (reg:CCZ flags) (const_int 0)) (if_then_else (ne (compare:CCZ (pre_dec:DI cx) (const_int 0)) (const_int 0)) (const_int 5) (pc)) (pc)))
	loope  0x8
(set (pc) (if_then_else (eq (reg:CCZ flags) (const_int 0)) (if_then_else (ne (compare:CCZ (pre_dec:DI cx) (const_int 0)) (const_int 0)) (const_int 8) (pc)) (pc)))
	loopne  0xc
(set (pc) (if_then_else (ne (reg:CCZ flags) (const_int 0)) (if_then_else (ne (compare:CCZ (pre_dec:DI cx) (const_int 0)) (const_int 0)) (const_int 12) (pc)) (pc)))
	loopne  0xf
(set (pc) (if_then_else (ne (reg:CCZ flags) (const_int 0)) (if_then_else (ne (compare:CCZ (pre_dec:DI cx) (const_int 0)) (const_int 0)) (const_int 15) (pc)) (pc)))
	scas al,BYTE PTR es:[rdi]
(set (reg:CC flags) (compare:CC (reg:QI ax) (mem:QI (reg:DI di))))
	lea    rax,[r12]
(set (reg:DI ax) (reg:DI r12))
	lea    rbx,[r15]
(set (reg:DI bx) (reg:DI r15))
	jae    3485
(set (pc) (if_then_else (geu (reg:CC flags) (const_int 0)) (const_int 3485) (pc)))
	jcxz   3485
(set (pc) (if_then_else (eq (compare:CC (reg:HI cx) (const_int 0)) (const_int 0)) (const_int 3485) (pc)))
	jecxz   3485
(set (pc) (if_then_else (eq (compare:CC (reg:SI cx) (const_int 0)) (const_int 0)) (const_int 3485) (pc)))
	jrcxz   3485
(set (pc) (if_then_else (eq (compare:CC (reg:DI cx) (const_int 0)) (const_int 0)) (const_int 3485) (pc)))
	jmp    DWORD PTR ds:0xd9d
(set (pc) (mem:SI (const_int 3485)))
	jmp    DWORD PTR ds:0x1234
(set (pc) (mem:SI (const_int 4660)))
	jmp    QWORD PTR ds:0x5e8
(set (pc) (mem:DI (const_int 1512)))
	jmp    QWORD PTR ds:0x4321
(set (pc) (mem:DI (const_int 17185)))
	jmp    QWORD PTR [rax]
(set (pc) (mem:DI (reg:DI ax)))
	jmp    QWORD PTR [rbx]
(set (pc) (mem:DI (reg:DI bx)))
	jmp    QWORD PTR [rsi*2+0x3]
(set (pc) (mem:DI (plus:DI (mult:DI (reg:DI si) (const_int 2)) (const_int 3))))
	jmp    QWORD PTR [rdi*2-0x4]
(set (pc) (mem:DI (plus:DI (mult:DI (reg:DI di) (const_int 2)) (const_int -4))))
	jmp    QWORD PTR [rcx*4+0xd9d]
(set (pc) (mem:DI (plus:DI (mult:DI (reg:DI cx) (const_int 4)) (const_int 3485))))
	jmp    QWORD PTR [rdx*4-0x3485]
(set (pc) (mem:DI (plus:DI (mult:DI (reg:DI dx) (const_int 4)) (const_int -13445))))
	jmp    QWORD PTR [r12*8+0x1234]
(set (pc) (mem:DI (plus:DI (mult:DI (reg:DI r12) (const_int 8)) (const_int 4660))))
	jmp    QWORD PTR [r15*8-0x4321]
(set (pc) (mem:DI (plus:DI (mult:DI (reg:DI r15) (const_int 8)) (const_int -17185))))
	jmp    DWORD PTR [rax]
(set (pc) (mem:SI (reg:DI ax)))
	jmp    DWORD PTR [rbx]
(set (pc) (mem:SI (reg:DI bx)))
	jmp    DWORD PTR [rsi*2+0x3]
(set (pc) (mem:SI (plus:DI (mult:DI (reg:DI si) (const_int 2)) (const_int 3))))
	jmp    DWORD PTR [rdi*2-0x4]
(set (pc) (mem:SI (plus:DI (mult:DI (reg:DI di) (const_int 2)) (const_int -4))))
	jmp    DWORD PTR [rcx*4+0xd9d]
(set (pc) (mem:SI (plus:DI (mult:DI (reg:DI cx) (const_int 4)) (const_int 3485))))
	jmp    DWORD PTR [rdx*4-0x3485]
(set (pc) (mem:SI (plus:DI (mult:DI (reg:DI dx) (const_int 4)) (const_int -13445))))
	jmp    DWORD PTR [r12*8+0x1234]
(set (pc) (mem:SI (plus:DI (mult:DI (reg:DI r12) (const_int 8)) (const_int 4660))))
	jmp    DWORD PTR [r15*8-0x4321]
(set (pc) (mem:SI (plus:DI (mult:DI (reg:DI r15) (const_int 8)) (const_int -17185))))
	jmp    DWORD PTR [eax]
(set (pc) (mem:SI (reg:SI ax)))
	jmp    DWORD PTR [ebx]
(set (pc) (mem:SI (reg:SI bx)))
	jmp    DWORD PTR [esi*2+0x3]
(set (pc) (mem:SI (plus:SI (mult:SI (reg:SI si) (const_int 2)) (const_int 3))))
	jmp    DWORD PTR [edi*2-0x4]
(set (pc) (mem:SI (plus:SI (mult:SI (reg:SI di) (const_int 2)) (const_int -4))))
	jmp    DWORD PTR [ecx*4+0xd9d]
(set (pc) (mem:SI (plus:SI (mult:SI (reg:SI cx) (const_int 4)) (const_int 3485))))
	jmp    DWORD PTR [edx*4-0x3485]
(set (pc) (mem:SI (plus:SI (mult:SI (reg:SI dx) (const_int 4)) (const_int -13445))))
	jmp    DWORD PTR [r12d*8+0x1234]
(set (pc) (mem:SI (plus:SI (mult:SI (reg:SI r12) (const_int 8)) (const_int 4660))))
	jmp    DWORD PTR [r15d*8-0x4321]
(set (pc) (mem:SI (plus:SI (mult:SI (reg:SI r15) (const_int 8)) (const_int -17185))))
	jmp    DWORD PTR [r8+r9*4]
(set (pc) (mem:DI (plus:DI (reg:DI r8) (mult:DI (reg:DI r9) (const_int 4)))))
	jmp    DWORD PTR [r12+r15*4]
(set (pc) (mem:DI (plus:DI (reg:DI r12) (mult:DI (reg:DI r15) (const_int 4)))))
	jmp    QWORD PTR [rdx+rax*8]
(set (pc) (mem:DI (plus:DI (reg:DI dx) (mult:DI (reg:DI ax) (const_int 8)))))
	jmp    QWORD PTR [rcx+rbx*8]
(set (pc) (mem:DI (plus:DI (reg:DI cx) (mult:DI (reg:DI bx) (const_int 8)))))
	fmul   DWORD PTR [rax]
(set (reg:XF st) (mult:XF (reg:XF st) (float_extend:XF (mem:SF (reg:DI ax)))))
	fmul   DWORD PTR [rbx]
(set (reg:XF st) (mult:XF (reg:XF st) (float_extend:XF (mem:SF (reg:DI bx)))))
	fimul  DWORD PTR [rax] 
(set (reg:XF st) (mult:XF (reg:XF st) (float_extend:XF (mem:SF (reg:DI ax)))))
	fimul  DWORD PTR [rbx] 
(set (reg:XF st) (mult:XF (reg:XF st) (float_extend:XF (mem:SF (reg:DI bx)))))
	fimul  DWORD PTR [rcx+0xd9d]
(set (reg:XF st) (mult:XF (reg:XF st) (float_extend:XF (mem:SF (plus:DI (reg:DI cx) (const_int 3485))))))
	fimul  DWORD PTR [rdx+0x1234]
(set (reg:XF st) (mult:XF (reg:XF st) (float_extend:XF (mem:SF (plus:DI (reg:DI dx) (const_int 4660))))))
	fdiv   DWORD PTR [rax+0xd9d]
(set (reg:XF st) (div:XF (reg:XF st) (float_extend:XF (mem:SF (plus:DI (reg:DI ax) (const_int 3485))))))
	fdiv   DWORD PTR [rbx+0x1234]
(set (reg:XF st) (div:XF (reg:XF st) (float_extend:XF (mem:SF (plus:DI (reg:DI bx) (const_int 4660))))))
	fdivr  DWORD PTR [rax+0xd9d]
(set (reg:XF st) (div:XF (float_extend:XF (mem:SF (plus:DI (reg:DI ax) (const_int 3485)))) (reg:XF st)))
	fdivr  DWORD PTR [rbx+0x1234]
(set (reg:XF st) (div:XF (float_extend:XF (mem:SF (plus:DI (reg:DI bx) (const_int 4660)))) (reg:XF st)))
	fdivr  DWORD PTR [rcx]
(set (reg:XF st) (div:XF (float_extend:XF (mem:SF (reg:DI cx))) (reg:XF st)))
	fdivr  DWORD PTR [rdx]
(set (reg:XF st) (div:XF (float_extend:XF (mem:SF (reg:DI dx))) (reg:XF st)))
	movdqu XMMWORD PTR [r12],xmm0
(set (mem:V1TI (reg:DI r12)) (reg:V1TI xmm0))
	movdqu XMMWORD PTR [r15],xmm1
(set (mem:V1TI (reg:DI r15)) (reg:V1TI xmm1))
	movdqu XMMWORD PTR [rax+0x3],xmm2
(set (mem:V1TI (plus:DI (reg:DI ax) (const_int 3))) (reg:V1TI xmm2))
	movdqu XMMWORD PTR [rbx+0x4],xmm3
(set (mem:V1TI (plus:DI (reg:DI bx) (const_int 4))) (reg:V1TI xmm3))
	movntdq XMMWORD PTR [r12],xmm3
(set (mem:V2DI (reg:DI r12)) (unspec:V2DI [(reg:V2DI xmm3)] UNSPEC_MOVNT))
	movntdq XMMWORD PTR [r15],xmm4
(set (mem:V2DI (reg:DI r15)) (unspec:V2DI [(reg:V2DI xmm4)] UNSPEC_MOVNT))
	movdqa XMMWORD PTR [rax],xmm0
(set (mem:V4SI (reg:DI ax)) (reg:V4SI xmm0))
	movdqa XMMWORD PTR [rbx],xmm1
(set (mem:V4SI (reg:DI bx)) (reg:V4SI xmm1))
	movdqa XMMWORD PTR [rsi+0xd9d],xmm3
(set (mem:V4SI (plus:DI (reg:DI si) (const_int 3485))) (reg:V4SI xmm3))
	movdqa XMMWORD PTR [rdi+0x1234],xmm4
(set (mem:V4SI (plus:DI (reg:DI di) (const_int 4660))) (reg:V4SI xmm4))
	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
(parallel [(set (reg:DI cx) (const_int 0)) (set (reg:DI di) (plus:DI (reg:DI di) (reg:DI cx))) (set (reg:DI si) (plus:DI (reg:DI si) (reg:DI cx))) (set (mem:BLKQI (reg:DI di)) (mem:BLKQI (reg:DI si)))])
	rep movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
(parallel [(set (reg:DI cx) (const_int 0)) (set (reg:DI di) (plus:DI (ashift:DI (reg:DI cx) (const_int 2)) (reg:DI di))) (set (reg:DI si) (plus:DI (ashift:DI (reg:DI cx) (const_int 2)) (reg:DI si))) (set (mem:BLKSI (reg:DI di)) (mem:BLKSI (reg:DI si)))])
	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
(parallel [(set (reg:DI cx) (const_int 0)) (set (reg:DI di) (plus:DI (ashift:DI (reg:DI cx) (const_int 3)) (reg:DI di))) (set (reg:DI si) (plus:DI (ashift:DI (reg:DI cx) (const_int 3)) (reg:DI si))) (set (mem:BLKDI (reg:DI di)) (mem:BLKDI (reg:DI si)))])
	repnz scas al,BYTE PTR es:[rdi]
(parallel [(set (reg:DI cx) (unspec:DI [(mem:BLKQI (reg:DI di)) (reg:QI ax) (const_int 16) (reg:DI cx)] UNSPEC_SCAS)) (clobber (reg:DI di)) (clobber (reg:CC flags))])
	rep stos BYTE PTR es:[rdi],al
(parallel [(set (reg:DI cx) (const_int 0)) (set (reg:DI di) (plus:DI (reg:DI di) (reg:DI cx))) (set (mem:BLKQI (reg:DI di)) (const_int 0))])
	rep stos DWORD PTR es:[rdi],eax
(parallel [(set (reg:DI cx) (const_int 0)) (set (reg:DI di) (plus:DI (ashift:DI (reg:DI cx) (const_int 2)) (reg:DI di))) (set (mem:BLKSI (reg:DI di)) (const_int 0))])
	rep stos QWORD PTR es:[rdi],rax
(parallel [(set (reg:DI cx) (const_int 0)) (set (reg:DI di) (plus:DI (ashift:DI (reg:DI cx) (const_int 3)) (reg:DI di))) (set (mem:BLKDI (reg:DI di)) (const_int 0))])
	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
(parallel [(set (reg:CC flags) (compare:CC (mem:BLKQI (reg:DI si)) (mem:BLKQI (reg:DI di)))) (clobber (reg:DI si)) (clobber (reg:DI di)) (clobber (reg:DI cx))])
	cmp    QWORD PTR fs:[rbx],0x12
(set (reg:CCZ flags) (compare:CCZ (mem:FSDI (reg:DI bx)) (const_int 18)))
	cmp    QWORD PTR fs:[rdx],0x28
(set (reg:CCZ flags) (compare:CCZ (mem:FSDI (reg:DI dx)) (const_int 40)))
	mov    QWORD PTR fs:[rbx],rdi
(set (mem:FSDI (reg:DI bx)) (reg:DI di))
	mov    QWORD PTR fs:[rdx],rax
(set (mem:FSDI (reg:DI dx)) (reg:DI ax))
	mov    QWORD PTR fs:0x3,r12
(set (mem:FSDI (const_int 3)) (reg:DI r12))
	mov    QWORD PTR fs:0x4,r15
(set (mem:FSDI (const_int 4)) (reg:DI r15))
	mov    r12,QWORD PTR fs:[rax]
(set (reg:DI r12) (mem:FSDI (reg:DI ax)))
	mov    r15,QWORD PTR fs:[rcx]
(set (reg:DI r15) (mem:FSDI (reg:DI cx)))
	mov    rax,QWORD PTR fs:0x43
(set (reg:DI ax) (mem:FSDI (const_int 67)))
	mov    rbx,QWORD PTR fs:0x15
(set (reg:DI bx) (mem:FSDI (const_int 21)))
	push   DWORD PTR ds:0x3
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (const_int 3)))
	push   DWORD PTR ds:0x4
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (const_int 4)))
	mov    al,ds:0x3
(set (reg:QI ax) (mem:QI (const_int 3)))
	mov    bl,ds:0x4
(set (reg:QI bx) (mem:QI (const_int 4)))
	call   DWORD PTR ds:0x3
(call (mem:QI (mem:DI (const_int 3))))
	call   DWORD PTR ds:0x4
(call (mem:QI (mem:DI (const_int 4))))
	movzx  eax,BYTE PTR ds:0x3
(set (reg:SI ax) (zero_extend:SI (mem:QI (const_int 3))))
	movzx  ebx,BYTE PTR ds:0x4
(set (reg:SI bx) (zero_extend:SI (mem:QI (const_int 4))))
	or     al,BYTE PTR ds:0x3
(parallel [(set (reg:QI ax) (ior:QI (reg:QI ax) (mem:QI (const_int 3)))) (clobber (reg:CC flags))])
	or     bl,BYTE PTR ds:0x4
(parallel [(set (reg:QI bx) (ior:QI (reg:QI bx) (mem:QI (const_int 4)))) (clobber (reg:CC flags))])
	or     eax,DWORD PTR ds:0x3
(parallel [(set (reg:SI ax) (ior:SI (reg:SI ax) (mem:SI (const_int 3)))) (clobber (reg:CC flags))])
	or     ebx,DWORD PTR ds:0x4
(parallel [(set (reg:SI bx) (ior:SI (reg:SI bx) (mem:SI (const_int 4)))) (clobber (reg:CC flags))])
	push   DWORD PTR [eax*4+0xc]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (plus:SI (mult:SI (reg:SI ax) (const_int 4)) (const_int 12))))
	push   DWORD PTR [ebx*4+0xf]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (plus:SI (mult:DI (reg:SI bx) (const_int 4)) (const_int 15))))
	push   DWORD PTR [ecx*8+0xa]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (plus:SI (mult:SI (reg:SI cx) (const_int 8)) (const_int 10))))
	push   DWORD PTR [edx*8+0xb]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (plus:SI (mult:SI (reg:SI dx) (const_int 8)) (const_int 11))))
	push   DWORD PTR [eax+ebx*4]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (plus:SI (reg:SI ax) (mult:SI (reg:SI bx) (const_int 4)))))
	push   DWORD PTR [ecx+edx*4]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (plus:SI (reg:SI cx) (mult:SI (reg:SI dx) (const_int 4)))))
	push   DWORD PTR [eax+ebx*8]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (plus:SI (reg:SI ax) (mult:SI (reg:SI bx) (const_int 8)))))
	push   DWORD PTR [ecx+edx*8]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (plus:SI (reg:SI cx) (mult:SI (reg:SI dx) (const_int 8)))))
	push   DWORD PTR [eax+ebx+0x3]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (plus:SI (plus:SI (reg:SI ax) (reg:SI bx)) (const_int 3))))
	push   DWORD PTR [ecx+edx+0x4]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (plus:SI (plus:SI (reg:SI cx) (reg:SI dx)) (const_int 4))))
	push   DWORD PTR [eax]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (reg:SI ax)))
	push   DWORD PTR [ebx]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (reg:SI bx)))
	push   DWORD PTR [ecx+0x3]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (plus:SI (reg:SI cx) (const_int 3))))
	push   DWORD PTR [edx+0x4]
(set (mem:SI (pre_dec:SI (reg:SI sp))) (mem:SI (plus:SI (reg:SI dx) (const_int 4))))
	push   eax
(set (mem:SI (pre_dec:SI (reg:SI sp))) (reg:SI ax))
	call   DWORD PTR [eax*4+0xc]
(call (mem:QI (mem:SI (plus:SI (mult:SI (reg:SI ax) (const_int 4)) (const_int 12)))))
	call   DWORD PTR [ebx*4+0xf]
(call (mem:QI (mem:SI (plus:SI (mult:SI (reg:SI bx) (const_int 4)) (const_int 15)))))
	call   DWORD PTR [ecx*8+0xa]
(call (mem:QI (mem:SI (plus:SI (mult:SI (reg:SI cx) (const_int 8)) (const_int 10)))))
	call   DWORD PTR [edx*8+0xb]
(call (mem:QI (mem:SI (plus:SI (mult:SI (reg:SI dx) (const_int 8)) (const_int 11)))))
	or    eax,DWORD PTR ds:0x3
(parallel [(set (reg:SI ax) (ior:SI (reg:SI ax) (mem:SI (const_int 3)))) (clobber (reg:CC flags))])
	or    ebx,DWORD PTR ds:0x4
(parallel [(set (reg:SI bx) (ior:SI (reg:SI bx) (mem:SI (const_int 4)))) (clobber (reg:CC flags))])
	xor    eax,DWORD PTR ds:0x3
(parallel [(set (reg:SI ax) (xor:SI (reg:SI ax) (mem:SI (const_int 3)))) (clobber (reg:CC flags))])
	xor    ebx,DWORD PTR ds:0x4
(parallel [(set (reg:SI bx) (xor:SI (reg:SI bx) (mem:SI (const_int 4)))) (clobber (reg:CC flags))])
	xor    rax, rax
(parallel [(set (reg:DI ax) (const_int 0)) (clobber (reg:CC flags))])
	xor    rbx, rbx
(parallel [(set (reg:DI bx) (const_int 0)) (clobber (reg:CC flags))])
	xor    ecx, ecx
(parallel [(set (reg:SI cx) (const_int 0)) (clobber (reg:CC flags))])
	xor    edx, edx
(parallel [(set (reg:SI dx) (const_int 0)) (clobber (reg:CC flags))])
	xor    rax,QWORD PTR fs:0x28
(parallel [(set (reg:DI ax) (xor:DI (reg:DI ax) (mem:DI (const_int 40)))) (clobber (reg:CC flags))])
	xor    r12d,DWORD PTR [rax+rbx+0x3]
(parallel [(set (reg:SI r12) (xor:SI (reg:SI r12) (mem:SI (plus:DI (plus:DI (reg:DI ax) (reg:DI bx)) (const_int 3))))) (clobber (reg:CC flags))])
	xor    r15d,DWORD PTR [rcx+rdx+0x4]
(parallel [(set (reg:SI r15) (xor:SI (reg:SI r15) (mem:SI (plus:DI (plus:DI (reg:DI cx) (reg:DI dx)) (const_int 4))))) (clobber (reg:CC flags))])
	inc    BYTE PTR [rax]
(parallel [(set (mem:QI (reg:DI ax)) (plus:QI (mem:QI (reg:DI ax)) (const_int 1))) (clobber (reg:CC flags))])
	inc    BYTE PTR [rbx]
(parallel [(set (mem:QI (reg:DI bx)) (plus:QI (mem:QI (reg:DI bx)) (const_int 1))) (clobber (reg:CC flags))])
	inc    DWORD PTR ds:0x3
(parallel [(set (mem:SI (const_int 3)) (plus:SI (mem:SI (const_int 3)) (const_int 1))) (clobber (reg:CC flags))])
	inc    DWORD PTR ds:0x4
(parallel [(set (mem:SI (const_int 4)) (plus:SI (mem:SI (const_int 4)) (const_int 1))) (clobber (reg:CC flags))])
	dec    DWORD PTR [rax]
(parallel [(set (mem:SI (reg:DI ax)) (plus:SI (mem:SI (reg:DI ax)) (const_int -1))) (clobber (reg:CC flags))])
	dec    DWORD PTR [rbx]
(parallel [(set (mem:SI (reg:DI bx)) (plus:SI (mem:SI (reg:DI bx)) (const_int -1))) (clobber (reg:CC flags))])
	dec    DWORD PTR [rax+rbx*4+0xd9d]
(parallel [(set (mem:SI (plus:DI (plus:DI (reg:DI ax) (mult:DI (reg:DI bx) (const_int 4))) (const_int 3485))) (plus:SI (mem:SI (plus:DI (plus:DI (reg:DI ax) (mult:DI (reg:DI bx) (const_int 4))) (const_int 3485))) (const_int -1))) (clobber (reg:CC flags))])
	dec    DWORD PTR [rcx+rdx*4+0x1234]
(parallel [(set (mem:SI (plus:DI (plus:DI (reg:DI cx) (mult:DI (reg:DI dx) (const_int 4))) (const_int 4660))) (plus:SI (mem:SI (plus:DI (plus:DI (reg:DI cx) (mult:DI (reg:DI dx) (const_int 4))) (const_int 4660))) (const_int -1))) (clobber (reg:CC flags))])
	dec    DWORD PTR ds:0x3
(parallel [(set (mem:SI (const_int 3)) (plus:SI (mem:SI (const_int 3)) (const_int -1))) (clobber (reg:CC flags))])
	dec    DWORD PTR ds:0x4
(parallel [(set (mem:SI (const_int 4)) (plus:SI (mem:SI (const_int 4)) (const_int -1))) (clobber (reg:CC flags))])
	adc    eax, DWORD PTR [rbx]
(parallel [(set (reg:SI ax) (plus:SI (plus:SI (ltu:SI (reg:CCC flags) (const_int 0)) (reg:SI ax)) (mem:SI (reg:DI bx)))) (clobber (reg:CC flags))])
	adc    ecx, DWORD PTR [rdx]
(parallel [(set (reg:SI cx) (plus:SI (plus:SI (ltu:SI (reg:CCC flags) (const_int 0)) (reg:SI cx)) (mem:SI (reg:DI dx)))) (clobber (reg:CC flags))])
	adc    BYTE PTR [rbx+0xd9d], al
(parallel [(set (mem:QI (plus:DI (reg:DI bx) (const_int 3485))) (plus:SI (plus:SI (ltu:SI (reg:CCC flags) (const_int 0)) (mem:QI (plus:DI (reg:DI bx) (const_int 3485)))) (reg:QI ax))) (clobber (reg:CC flags))])
	adc    BYTE PTR [rdx+0x1234], cl
(parallel [(set (mem:QI (plus:DI (reg:DI dx) (const_int 4660))) (plus:SI (plus:SI (ltu:SI (reg:CCC flags) (const_int 0)) (mem:QI (plus:DI (reg:DI dx) (const_int 4660)))) (reg:QI cx))) (clobber (reg:CC flags))])
	adc    BYTE PTR [rsi], bl
(parallel [(set (mem:QI (reg:DI si)) (plus:SI (plus:SI (ltu:SI (reg:CCC flags) (const_int 0)) (mem:QI (reg:DI si))) (reg:QI bx))) (clobber (reg:CC flags))])
	adc    BYTE PTR [rdi], dl
(parallel [(set (mem:QI (reg:DI di)) (plus:SI (plus:SI (ltu:SI (reg:CCC flags) (const_int 0)) (mem:QI (reg:DI di))) (reg:QI dx))) (clobber (reg:CC flags))])
	btr    eax,0xc
(parallel [(set (zero_extract:SI (reg:SI ax) (const_int 1) (const_int 12)) (const_int 0)) (clobber (reg:CC flags))])
	btr    ebx,0xf
(parallel [(set (zero_extract:SI (reg:SI ax) (const_int 1) (const_int 15)) (const_int 0)) (clobber (reg:CC flags))])
	ptest  xmm2,xmm0
(set (reg:CCZ flags) (compare:CCZ (and:DF (reg:DF xmm2) (reg:DF xmm0)) (const_int 0)))
	ptest  xmm3,xmm4
(set (reg:CCZ flags) (compare:CCZ (and:DF (reg:DF xmm3) (reg:DF xmm4)) (const_int 0)))
